plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.google.protobuf") version "0.9.4"
}

group = 'ru.dmiit3iy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.liquibase:liquibase-core")
    implementation ("org.mapstruct:mapstruct:1.5.5.Final")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")
    implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE' // Spring Boot gRPC сервер
    implementation 'io.grpc:grpc-protobuf:1.62.2'                            // Protobuf поддержка
    implementation 'io.grpc:grpc-stub:1.62.2'                                // gRPC Stub
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'                   // Для @Generated (опционально)

    compileOnly ("org.projectlombok:lombok-mapstruct-binding:0.2.0")
    annotationProcessor ("org.projectlombok:lombok-mapstruct-binding:0.2.0")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        create("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.62.2"
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.plugins {
                create("grpc")
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs(
                    "build/generated/source/proto/main/grpc",
                    "build/generated/source/proto/main/java"
            )
        }
    }
}




tasks.named('test') {
    useJUnitPlatform()
}
